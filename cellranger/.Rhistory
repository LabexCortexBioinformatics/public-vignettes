library(Seurat, quietly = TRUE)
library(SeuratWrappers)
# Load  the public dataset
seurat_matrix <- Read10X('/mnt/Data1/public_vignettes/cellranger_output/neuron_1k/outs/filtered_feature_bc_matrix')
seur <- CreateSeuratObject(counts = seurat_matrix, project = "neuron_1k", min.cells = 3, min.features = 100)
seur
# QC metrics calculation and visualization
seur$percent.mt <- PercentageFeatureSet(seur, pattern = "^mt-")
seur$percent.ribo <- PercentageFeatureSet(seur, pattern = "^Rp[sl][[:digit:]]")
p5 = FeatureScatter(seur, feature1 = "nFeature_RNA", feature2 = "percent.mt", group.by = "orig.ident")
seur <- RunMiQC(seur, percent.mt = "percent.mt", nFeature_RNA = "nFeature_RNA", posterior.cutoff = 0.75,
model.slot = "flexmix_model")
p6 = PlotMiQC(seur, color.by = "miQC.probability") + ggplot2::scale_color_gradient(low = "grey", high = "purple")
p7 = PlotMiQC(seur, color.by = "miQC.keep")
p5 + p6 + p7
p5 = FeatureScatter(seur, feature1 = "nFeature_RNA", feature2 = "percent.mt", group.by = "orig.ident")
seur <- RunMiQC(seur, percent.mt = "percent.mt", nFeature_RNA = "nFeature_RNA", posterior.cutoff = 0.75,
model.slot = "flexmix_model")
p6 = PlotMiQC(seur, color.by = "miQC.probability") + ggplot2::scale_color_gradient(low = "grey", high = "purple")
p7 = PlotMiQC(seur, color.by = "miQC.keep")
gridExtra::grid.arrange(p5, p6, p7, ncol = 2)
p5 = FeatureScatter(seur, feature1 = "nFeature_RNA", feature2 = "percent.mt", group.by = "orig.ident")
seur <- RunMiQC(seur, percent.mt = "percent.mt", nFeature_RNA = "nFeature_RNA", posterior.cutoff = 0.75,
model.slot = "flexmix_model")
p6 = PlotMiQC(seur, color.by = "miQC.probability") + ggplot2::scale_color_gradient(low = "grey", high = "purple")
p7 = PlotMiQC(seur, color.by = "miQC.keep")
gridExtra::grid.arrange(p5, p6, p7, ncol = 2)
Idents(seur) = "miQC.keep"
loQC.cells = WhichCells(seur, idents = "discard")
length(loQC.cells)
View(seur)
# Load seurat manually filtered
seur_filtered <- readRDS("/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
loQC_in_filtered <- Cells(seur_filtered)[loQC_cells]
Idents(seur) = "miQC.keep"
loQC_cells = WhichCells(seur, idents = "discard")
length(loQC_cells)
# Load seurat manually filtered
seur_filtered <- readRDS("/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
loQC_in_filtered <- Cells(seur_filtered)[loQC_cells]
# Load seurat manually filtered
seur_filtered <- readRDS("/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
loQC_in_filtered <- Cells(seur_filtered)[Cells(seur_filtered) %in% loQC_cells]
# Load seurat manually filtered
seur_filtered <- readRDS("/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
loQC_in_filtered <- Cells(seur_filtered)[Cells(seur_filtered) %in% loQC_cells]
length(loQC_in_filtered)
FeaturePlot(seur_filtered, features = loQC_in_filtered)
# Add the discard cells to metadata
seur_filtered$keep <- !Cells(seur_filtered)%in%loQC_cells
FeaturePlot(seur_filtered, features = "keep")
# Add the discard cells to metadata
seur_filtered$keep <- ifelse(Cells(seur_filtered)%in%loQC_cells, "discard", "keep")
FeaturePlot(seur_filtered, features = "keep")
View(seur_filtered)
# Add the discard cells to metadata
seur_filtered$keep <- apply(Cells(seur_filtered), 1, function(x) ifelse(x%in%loQC_cells, "discard", "keep"))
# Add the discard cells to metadata
x <- apply(Cells(seur_filtered), 1, function(x) ifelse(x%in%loQC_cells, "discard", "keep"))
# Add the discard cells to metadata
x <- ifelse(Cells(seur_filtered)%in%loQC_cells, "discard", "keep")
seur_filtered$keep <-keep
# Add the discard cells to metadata
x <- ifelse(Cells(seur_filtered)%in%loQC_cells, "discard", "keep")
seur_filtered$keep <- "keep"
FeaturePlot(seur_filtered, features = "keep")
y <- x=="keep"
length(y)
# Add the discard cells to metadata
seur_filtered <- SetIdent(seur_filtered, cells.use = loQC_in_filtered, ident.use = "discard")
# Load seurat manually filtered
seur_filtered <- readRDS("/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
loQC_in_filtered <- Cells(seur_filtered)[Cells(seur_filtered) %in% loQC_cells]
length(loQC_in_filtered)
# Add the discard cells to metadata
seur_filtered <- SetIdent(seur_filtered, cells.use = loQC_in_filtered, ident.use = "discard")
View(seur)
# Add the discard cells to metadata
seur_filtered$miQC <- as.data.frame(seur$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered)]
# Add the discard cells to metadata
seur_filtered$miQC <- as.data.frame(seur$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
FeaturePlot(seur_filtered, features = "miQC")
x <- as.data.frame(seur$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
length(x=="keep")
# Load seurat manually filtered
seur_filtered <- readRDS("/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
loQC_in_filtered <- Cells(seur_filtered)[Cells(seur_filtered) %in% loQC_cells]
length(loQC_in_filtered)
# Add the discard cells to metadata
seur_filtered@meta.data$miQC <- as.data.frame(seur$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
FeaturePlot(seur_filtered, features = "miQC")
# Add the discard cells to metadata
seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
FeaturePlot(seur_filtered, features = "miQC")
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "keep")
seur_filtered <- SetIdent(seur_filtered, cells = Cells(seur_filtered)[!loQC_in_filtered], value = "discard")
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "keep")
seur_filtered <- SetIdent(seur_filtered, cells = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells], value = "discard")
seur_filtered@meta.data$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
FeaturePlot(seur_filtered, features = "miQC")
Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
loQC_in_filtered
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered@meta.data$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
FeaturePlot(seur_filtered, features = "miQC")
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
FeaturePlot(seur_filtered, features = "miQC")
View(seur_filtered)
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
DimPlot(seur_filtered)
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
p1 <- DimPlot(seur_filtered)
p2 <- DimPlot(seur_filtered, group.by = "cluster")
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
p1 <- DimPlot(seur_filtered)
p2 <- DimPlot(seur_filtered, group.by = "clusters")
p3 <- VlnPlot(seur_filtered, features = "nCount_RNA", group.by = "miQC")
p4 <- VlnPlot(seur_filtered, features = "percent.mt", group.by = "miQC")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
p1 <- DimPlot(seur_filtered)
p2 <- DimPlot(seur_filtered, group.by = "clusters")
p3 <- VlnPlot(seur_filtered, features = "nFeature_RNA", group.by = "miQC")
p4 <- VlnPlot(seur_filtered, features = "percent.mt", group.by = "miQC")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
p1 <- DimPlot(seur_filtered, order = "discard")
p2 <- DimPlot(seur_filtered, group.by = "clusters", label = TRUE) + NoLegend()
p3 <- VlnPlot(seur_filtered, features = "nFeature_RNA", group.by = "miQC")
p4 <- VlnPlot(seur_filtered, features = "percent.mt", group.by = "miQC")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
p1 <- DimPlot(seur_filtered, order = "discard", pt.size=0.5)
p2 <- DimPlot(seur_filtered, group.by = "clusters", label = TRUE) + NoLegend()
p3 <- VlnPlot(seur_filtered, features = "nFeature_RNA", group.by = "miQC")
p4 <- VlnPlot(seur_filtered, features = "percent.mt", group.by = "miQC")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
p1 <- DimPlot(seur_filtered, order = "discard", pt.size=0.5) + NoAxes()
p2 <- DimPlot(seur_filtered, group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
p3 <- VlnPlot(seur_filtered, features = "nFeature_RNA", group.by = "miQC")
p4 <- VlnPlot(seur_filtered, features = "percent.mt", group.by = "miQC")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
# Add the discard cells to metadata
# seur_filtered@meta.data$miQC <- seur@meta.data$miQC.keep
keep = Cells(seur_filtered)[!Cells(seur_filtered) %in% loQC_cells]
seur_filtered <- SetIdent(seur_filtered, cells = loQC_in_filtered, value = "discard")
seur_filtered <- SetIdent(seur_filtered, cells = keep, value = "keep")
seur_filtered$miQC <- Idents(seur_filtered)
# seur_filtered@meta.data$miQC <- as.data.frame(seur@meta.data$miQC.keep, row.names = Cells(seur))[Cells(seur_filtered),]
p1 <- DimPlot(seur_filtered, order = "discard", pt.size=1) + NoAxes()
p2 <- DimPlot(seur_filtered, group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
p3 <- VlnPlot(seur_filtered, features = "nFeature_RNA", group.by = "miQC")
p4 <- VlnPlot(seur_filtered, features = "percent.mt", group.by = "miQC")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
browseVignettes("doubletFinder")
remotes::install_github("chris-mcginnis-ucsf/DoubletFinder")
library(Seurat)
library(doubletFinder)
library(Seurat)
library(DoubletFinder)
# Load  the public dataset
seurat_matrix <- Read10X('/mnt/Data1/public_vignettes/cellranger_output/neuron_1k/outs/filtered_feature_bc_matrix')
seur <- CreateSeuratObject(counts = seurat_matrix, project = "neuron_1k", min.cells = 3, min.features = 100)
seur
browseVignettes("doubletFinder")
browseVignettes("DoubletFinder")
View(seur)
DefaultAssay(seur) = "RNA"
seur <- FindVariableFeatures(seur, assay = "RNA", verbose = FALSE)
seur <- ScaleData(seur, assay = "RNA", verbose = FALSE)
seur <- RunPCA(seur, assay = "RNA", verbose = FALSE)
ElbowPlot(seur, ndims = 50)
# pK identification
sweep.res.seur <- paramSweep_v3(seur, PCs = 1:10, sct = FALSE)
seur <- RunUMAP(seur, dims = 1:10)
nExp_poi <- round(0.01*1.28*length(Cells(seur)))
seur <- doubletFinder_v3(seur, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
library(SeuratWrappers)
nExp_poi <- round(0.01*1.28*length(Cells(seur)))
seur <- doubletFinder_v3(seur, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
View(seur)
# Load  the public dataset
seurat_matrix <- Read10X('/mnt/Data1/public_vignettes/cellranger_output/neuron_1k/outs/filtered_feature_bc_matrix')
seur <- CreateSeuratObject(counts = seurat_matrix, project = "neuron_1k", min.cells = 3, min.features = 100)
seur
DefaultAssay(seur) = "RNA"
seur <- NormalizeData(seur, assay = 'RNA')
seur <- FindVariableFeatures(seur, assay = "RNA", verbose = FALSE)
seur <- ScaleData(seur, assay = "RNA", verbose = FALSE)
seur <- RunPCA(seur, assay = "RNA", verbose = FALSE)
ElbowPlot(seur, ndims = 50)
seur <- RunUMAP(seur, dims = 1:10)
nExp_poi <- round(0.01*1.28*length(Cells(seur)))
seur <- doubletFinder_v3(seur, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
View(seur)
seur@meta.data[["DF.classifications_0.25_0.09_16"]]
length(seur@meta.data[["DF.classifications_0.25_0.09_16"]]=="Singlet")
nExp_poi <- round(0.01*1.28*length(Cells(seur)))
seur <- doubletFinder_v3(seur, PCs = 1:10, pN = 0.25, pK = 0.2, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
length(seur@meta.data[["DF.classifications_0.25_0.09_16"]]=="Singlet")
View(seur)
length(seur@meta.data[["DF.classifications_0.25_0.2_16"]]=="Singlet")
nExp_poi <- round(0.01*1.28*length(Cells(seur)))
seur <- doubletFinder_v3(seur, PCs = 1:10, pN = 0.25, pK = 0.04, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
length(seur@meta.data[["DF.classifications_0.25_0.04_16"]]=="Singlet")
BiocManager::install("scDblFinder")
set.seed(12125243151820524)
set.seed(12125243151820524)
set.seed(3151820524)
set.seed(3151820524)
set.seed(1212524)
DefaultAssay(seur) = "RNA"
seur_sce <- as.SingleCellExperiment(seur)
View(seur)
set.seed(1212524)
DefaultAssay(seur) = "RNA"
seur@assays$SCT = NULL
seur_sce <- as.SingleCellExperiment(seur)
set.seed(1212524)
DefaultAssay(seur) = "RNA"
Seurat_Object_Diet <- DietSeurat(seurat_object, assays = 'RNA')
set.seed(1212524)
DefaultAssay(seur) = "RNA"
seur <- DietSeurat(seur, assays = 'RNA')
seur_sce <- as.SingleCellExperiment(seur)
# we run scDblFinder expecting 4% doublet rate as define for 10x
seur_sce <- scDblFinder(seur_sce)
library(Seurat)
library(DoubletFinder)
library(scDblFinder)
set.seed(1212524)
DefaultAssay(seur) = "RNA"
seur <- DietSeurat(seur, assays = 'RNA')
seur_sce <- as.SingleCellExperiment(seur)
# we run scDblFinder expecting 4% doublet rate as define for 10x
seur_sce <- scDblFinder(seur_sce)
#sce$scDblFinder.score
#sce$scDblFinder.class
#5% doublets = 215 cells
seur_scDblFinder <- as.Seurat(seur_sce)
View(seur_scDblFinder)
doublet = WhichCells(seur_scDblFinder, idents = "doublet")
View(seur_scDblFinder)
doublet = WhichCells(seur_scDblFinder, idents = "scDblFinder.class")
View(seur_scDblFinder)
Idents(seur_scDblFinder) <- "scDblFinder.class"
doublet = WhichCells(seur_scDblFinder, idents = "doublet")
seur_filtered <- readRDS("/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
doublet_in_filtered <- Cells(seur_filtered)[Cells(seur_filtered) %in% doublet]
length(doublet_in_filtered)
Idents(seur_scDblFinder) <- "scDblFinder.class"
doublet = WhichCells(seur_scDblFinder, idents = "doublet")
VlnPlot(seur_scDblFinder, features = "nCount_RNA", group.by = "scDblFinder.class")
Idents(seur_scDblFinder) <- "scDblFinder.class"
doublet = WhichCells(seur_scDblFinder, idents = "doublet")
VlnPlot(seur_scDblFinder, features = "nFeature_RNA", group.by = "scDblFinder.class")
doublet_in_filtered <- Cells(seur_filtered)[Cells(seur_filtered) %in% doublet]
length(doublet_in_filtered)
singlet_in_filtered <- Cells(seur_filtered)[!Cells(seur_filtered) %in% doublet]
seur_filtered <- SetIdent(seur_filtered, cells = doublet_in_filtered, value = "doublet")
seur_filtered <- SetIdent(seur_filtered, cells = singlet_in_filtered, value = "singlet")
seur_filtered$doublet <- Idents(seur_filtered)
p1 <- DimPlot(seur_filtered, order = "doublet", pt.size=1) + NoAxes()
p2 <- DimPlot(seur_filtered, group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
p3 <- VlnPlot(seur_filtered, features = "nFeature_RNA", group.by = "doublet")
p4 <- VlnPlot(seur_filtered, features = "percent.mt", group.by = "doublet")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
p1 <- DimPlot(seur_filtered, order = "doublet", pt.size=1) + NoAxes()
p2 <- DimPlot(seur_filtered, group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
p3 <- VlnPlot(seur_filtered, features = "nFeature_RNA", group.by = "doublet")
p4 <- VlnPlot(seur_filtered, features = "nCount_RNA", group.by = "doublet")
gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)
