knitr::opts_chunk$set(echo = TRUE)
seur = subset(seur, subset = percent.mt < 20)
library(tidyverse, quietly = TRUE)
library(Seurat, quietly = TRUE)
library(patchwork)
library(scater)
# Load  the public dataset
seurat_matrix <- Read10X('/mnt/Data1/public_vignettes/cellranger_output/neuron_1k/outs/filtered_feature_bc_matrix')
seur <- CreateSeuratObject(counts = seurat_matrix, project = "neuron_1k", min.cells = 3, min.features = 100)
seur
# QC metrics calculation and visualization
seur[["percent.mt"]] <- PercentageFeatureSet(seur, pattern = "^mt-")
seur[["percent.ribo"]] <- PercentageFeatureSet(seur, pattern = "^Rp[sl][[:digit:]]")
VlnPlot(seur, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 4, pt.size = 0.1)
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seur = subset(seur, subset = percent.mt < 20)
VlnPlot(seur, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 4, pt.size = 0.1)
VlnPlot(seur, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 4, pt.size = 0.1)
seur = subset(seur, subset = (percent.mt < 20 & nCount_RNA < 50000))
VlnPlot(seur, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 4, pt.size = 0.1)
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seur = subset(seur, subset = (nFeature_RNA > 1000 & nCount_RNA < 30000))
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seur <- SCTransform(seur, method = "glmGamPoi", verbose = FALSE)
library(glmGamPoi)
BiocManager::install("glmGamPoi")
seur <- SCTransform(seur, method = "glmGamPoi", verbose = FALSE)
seur <- RunPCA(seur, verbose = FALSE)
ElbowPlot(seur, ndims = 50)
DefaultAssay(seur) <- "RNA"
seur.sce <- seur
seur.sce@assays$SCT <- NULL
seur.sce <- as.SingleCellExperiment(seur.sce)
plotPCA(seur.sce, ncomponents = 4, colour_by = "orig.ident")
View(seur)
DimHeatmap(ssseur, nfeatures=50)
DimHeatmap(seur, nfeatures=50)
DimHeatmap(seur, nfeatures=40, assays = "SCT")
DimHeatmap(seur, dims = 1:10, assays = "SCT")
DimHeatmap(seur, dims = 1:10, assays = "SCT")
DimHeatmap(seur, dims = 1:10, assays = "SCT")
DimHeatmap(seur, dims = 1:10, assays = "SCT")
DimHeatmap(seur, dims = 1:10, assays = "SCT")
DimHeatmap(seur, dims = 1:20, assays = "SCT", ncol = 4)
#Cluster the cells
DefaultAssay(seur) <- "SCT"
seur <- FindNeighbors(seur, dims = 1:12, verbose = FALSE)
#Reduction
seur <- FindClusters(seur, resolution = 1,verbose = FALSE)
seur@meta.data$dim12_res1 = Idents(seur)
p2 = DimPlot(seur, label = TRUE, pt.size = 0.8) + NoLegend() + ggtitle("dim12_res1")
p1 + p2
#Cluster the cells
DefaultAssay(seur) <- "SCT"
seur <- FindNeighbors(seur, dims = 1:12, verbose = FALSE)
#Reduction
seur <- FindClusters(seur, resolution = 1,verbose = FALSE)
seur@meta.data$dim12_res1 = Idents(seur)
DimPlot(seur, label = TRUE, pt.size = 0.8) + NoLegend() + ggtitle("dim12_res1")
#Cluster the cells
DefaultAssay(seur) <- "SCT"
seur <- FindNeighbors(seur, dims = 1:12, verbose = FALSE)
seur <- FindClusters(seur, resolution = 1,verbose = FALSE)
#Reduction
seur <- RunUMAP(seur, dims = 1:12, verbose = FALSE)
DimPlot(seur, label = TRUE, pt.size = 0.8) + NoLegend() + ggtitle("dim12_res1")
#Cluster the cells
DefaultAssay(seur) <- "SCT"
seur <- FindNeighbors(seur, dims = 1:12, verbose = FALSE)
seur <- FindClusters(seur, resolution = 0.5,verbose = FALSE)
#Reduction
seur <- RunUMAP(seur, dims = 1:12, verbose = FALSE)
DimPlot(seur, label = TRUE, pt.size = 0.8) + NoLegend() + ggtitle("dim12_res0.5")
VlnPlot(seur, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 4,
group.by = "seurat_clusters", pt.size = 0)
VlnPlot(seur, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 4,
group.by = "seurat_clusters", pt.size = 0.1)
FeaturePlot(seur, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 4)
markers.dim12 <-FindAllMarkers(seur, logfc.threshold = 1, min.pct = 0.5, verbose = FALSE, assay = "RNA", only.pos = TRUE)
top10.markers.dim12 = markers.dim12 %>% mutate(diff.pct = (pct.1 - pct.2)) %>% group_by(cluster) %>%
slice_max(order_by = avg_log2FC, n = 20) %>% slice_max(order_by = diff.pct, n = 10)
top10.markers.dim12
VlnPlot(seur, features = c("Thbs4", "Rbp1", "Id1", "Top2a", "Neat1", "Hes1",
"Hist1h2af", "Rps8", "Egfr", "Gm42418", "Vegfa", "Aldh1l1",
"Fam216b", "Ascl1", "Cenpe", "mt-Nd6", "Tril", "Pcp4",
"mt-Nd5", "Flt1"), ncol = 3, pt.size = 0, assay = "RNA")
VlnPlot(seur, features = c("Thbs4", "Rbp1", "Id1", "Top2a", "Neat1", "Hes1",
"Hist1h2af", "Rps8", "Egfr", "Gm42418", "Vegfa", "Aldh1l1",
"Fam216b", "Ascl1", "Cenpe", "mt-Nd6", "Tril", "Pcp4",
"mt-Nd5", "Flt1"), ncol = 3, pt.size = 0, assay = "RNA", same.y.lims = TRUE)
VlnPlot(seur, features = c("Thbs4", "Rbp1", "Id1", "Top2a", "Neat1", "Hes1",
"Hist1h2af", "Rps8", "Egfr", "Gm42418", "Vegfa", "Aldh1l1",
"Fam216b", "Ascl1", "Cenpe", "mt-Nd6", "Tril", "Pcp4",
"mt-Nd5", "Flt1"), ncol = 3, pt.size = 0, assay = "RNA", same.y.lims = 10)
VlnPlot(seur, features = c("Thbs4", "Rbp1", "Id1", "Top2a", "Neat1", "Hes1",
"Hist1h2af", "Rps8", "Egfr", "Gm42418", "Vegfa", "Aldh1l1",
"Fam216b", "Ascl1", "Cenpe", "mt-Nd6", "Tril", "Pcp4",
"mt-Nd5", "Flt1"), ncol = 3, pt.size = 0, assay = "RNA", log = TRUE)
markers.dim12 <-FindAllMarkers(seur, logfc.threshold = 1, min.pct = 0.5, verbose = FALSE, assay = "RNA", only.pos = TRUE)
top10.markers.dim12 = markers.dim12 %>% mutate(diff.pct = (pct.1 - pct.2)) %>% group_by(cluster) %>%
slice_max(order_by = avg_log2FC, n = 20) %>% slice_max(order_by = p_val_adj, n = 10)
top10.markers.dim12
markers.dim12 <-FindAllMarkers(seur, logfc.threshold = 1, min.pct = 0.5, verbose = FALSE, assay = "RNA", only.pos = TRUE)
markers.dim12 <-FindAllMarkers(seur, logfc.threshold = 1, min.pct = 0.5, verbose = FALSE, assay = "RNA", only.pos = TRUE)
top10.markers.dim12 = markers.dim12 %>% mutate(diff.pct = (pct.1 - pct.2)) %>% group_by(cluster) %>%
slice_max(order_by = avg_log2FC, n = 20) %>% slice_min(order_by = p_val_adj, n = 10)
top10.markers.dim12
VlnPlot(seur, features = c("Unc5d", "Dab1", "Ube2c", "Arpp21", "Lhx6", "Eomes",
"Zbtb20", "Adarb2", "Ndnf"), ncol = 3, pt.size = 0, assay = "RNA", log = TRUE)
View(markers.dim12)
VlnPlot(seur, features = c("Eomes", "Emx1", "Gsx2", "Dlx2", "Olig2", "Aqp4"), ncol = 3, pt.size = 0, assay = "RNA")
top10.markers.dim12 = markers.dim12 %>% mutate(diff.pct = (pct.1 - pct.2)) %>% group_by(cluster) %>%
slice_max(order_by = avg_log2FC, n = 20)
top10.markers.dim12
seur <- RenameIdents(seur, "0" = "GLU_neuron_cx", "1" = "early_neuron", "2" = "cycling_cells", "3" = "GABA_neuron_hp", "4" = "GABA_neuron_cx", "5" = "GLU_progenitor", "6" = "GABA_unknown", "7" = "GABA_cells", "8" = "cr_cells")
seur <- RenameIdents(seur, "0" = "GLU_neuron_cx", "1" = "early_neuron", "2" = "cycling_cells", "3" = "GABA_neuron_hp", "4" = "GABA_neuron_cx", "5" = "GLU_progenitor", "6" = "GABA_unknown", "7" = "GABA_cells", "8" = "cr_cells")
seur$clusters <- Idents(seur)
saveRDS(seur, "/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.idents")
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = orig.idents)
View(seur)
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = orig.ident)
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.ident")
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.ident")
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.ident")
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.ident")
FeatureScatter(seur, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.ident")
DimPlot(seur, reduction = "umap", group.by = "clusters")
DimPlot(seur, reduction = "umap", group.by = "clusters")
DimPlot(seur, reduction = "umap", group.by = "clusters")
DimPlot(seur, reduction = "umap", group.by = "clusters", label = TRUE)
DimPlot(seur, reduction = "umap", group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
DimPlot(seur, reduction = "umap", group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
DimPlot(seur, reduction = "umap", group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
DimPlot(seur, reduction = "umap", group.by = "clusters", label = TRUE) + NoLegend() + NoAxes()
# Load  human cell cycle genes from Seurat and Change to mouse format (uppercase)
s.genes <- cc.genes.updated.2019$s.genes
g2m.genes <- cc.genes.updated.2019$g2m.genes
s.genes <- str_to_title(s.genes)
g2m.genes <- str_to_title(g2m.genes)
# Cell cycle score, normalize in RNA assay and rename
seur <- CellCycleScoring(seur, s.features = s.genes, g2m.features = g2m.genes, set.ident = FALSE)
seur$CC.Difference <- seur$S.Score - seur$G2M.Score
FeaturePlot(seur, features = c("S.Score", "G2M.Score"))
FeaturePlot(seur, features = c("S.Score", "G2M.Score"))
FeaturePlot(seur, features = c("S.Score", "G2M.Score"))
FeaturePlot(seur, features = c("S.Score", "G2M.Score"))
FeaturePlot(seur, features = c("S.Score", "G2M.Score")) + NoAxes()
Y = read.table("/mnt/Data1/public_vignettes/seurat_data/YGenes.csv", header = TRUE)
Ygenes = as.character(Y$Ygenes)
Ygenes = colnames(FetchData(Nx2, vars = Ygenes))
Y = read.table("/mnt/Data1/public_vignettes/seurat_data/YGenes.csv", header = TRUE)
Ygenes = as.character(Y$Ygenes)
Ygenes = colnames(FetchData(seur, vars = Ygenes))
Ygenes
Y = read.table("/mnt/Data1/public_vignettes/seurat_data/YGenes.csv", header = TRUE)
Ygenes = as.character(Y$Ygenes)
Ygenes = colnames(FetchData(seur, vars = Ygenes))
Ygenes
seur$percent_y <- PercentageFeatureSet(seur, features = Ygenes)
#VlnPlot(seur, features = Ygenes, group.by = "orig.ident", assay = "RNA", pt.size = 0.5)
VlnPlot(seur, features = c("Xist", "percent_y", Ygenes), group.by = "orig.ident", assay = "RNA", pt.size = 0.1, ncol = 6)
length(WhichCells(Nx2, expression = Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1 & Usp9y < 0.1))
length(WhichCells(seur, expression = Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1 & Usp9y < 0.1))
length(WhichCells(seur, expression = "Xist" > 0.05 & "Ddx3y" < 0.1 & "Uty" < 0.1 & "Kdm5d" < 0.1 & "Usp9y" < 0.1))
length(WhichCells(seur, expression = ("Xist" > 0.05 & "Ddx3y" < 0.1 & "Uty" < 0.1 & "Kdm5d" < 0.1 & "Usp9y" < 0.1)))
length(WhichCells(seur, expression = (Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1 & Usp9y < 0.1)))
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = (Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1 & Usp9y < 0.1)))
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = (Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1)))
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = (Xist < 0.05 & (Ddx3y > 0.1 | Uty > 0.1 | Kdm5d > 0.1))))
View(seur)
View(seur)
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1))
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = Xist < 0.05 | Ddx3y > 0.1 | Uty > 0.1 | Kdm5d > 0.1))
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1))
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = Xist > 0.05))
DefaultAssay(seur) <- "RNA"
length(WhichCells(seur, expression = Xist > 0.05 & Ddx3y < 0.1 & Uty < 0.1 & Kdm5d < 0.1))
seur$percent_y <- PercentageFeatureSet(seur, features = Ygenes)
#VlnPlot(seur, features = Ygenes, group.by = "orig.ident", assay = "RNA", pt.size = 0.5)
VlnPlot(seur, features = c("Xist", "percent_y", Ygenes), group.by = "orig.ident", assay = "RNA", pt.size = 0.1, ncol = 6)
seur$percent_y <- PercentageFeatureSet(seur, features = Ygenes)
#VlnPlot(seur, features = Ygenes, group.by = "orig.ident", assay = "RNA", pt.size = 0.5)
VlnPlot(seur, features = c("Xist", "percent_y", Ygenes), group.by = "orig.ident", assay = "RNA", pt.size = 0.1, ncol = 6)
seur$percent_y <- PercentageFeatureSet(seur, features = Ygenes)
#VlnPlot(seur, features = Ygenes, group.by = "orig.ident", assay = "RNA", pt.size = 0.5)
VlnPlot(seur, features = c("Xist", "percent_y", Ygenes), group.by = "orig.ident", assay = "RNA", pt.size = 0.1, ncol = 6)
seur$percent_y <- PercentageFeatureSet(seur, features = Ygenes)
#VlnPlot(seur, features = Ygenes, group.by = "orig.ident", assay = "RNA", pt.size = 0.5)
VlnPlot(seur, features = c("Xist", "percent_y", Ygenes), group.by = "orig.ident", assay = "RNA", pt.size = 0.1, ncol = 6)
saveRDS(seur, "/mnt/Data1/public_vignettes/seurat_data/neuron_1k.rds")
# Load  the public dataset
seurat_matrix <- Read10X('/mnt/Data1/public_vignettes/cellranger_output/neuron_1k/outs/filtered_feature_bc_matrix')
seur <- CreateSeuratObject(counts = seurat_matrix, project = "neuron_1k", min.cells = 3, min.features = 100)
seur
# QC metrics calculation and visualization
seur$percent.mt <- PercentageFeatureSet(seur, pattern = "^mt-")
seur$percent.ribo <- PercentageFeatureSet(seur, pattern = "^Rp[sl][[:digit:]]")
p5 = FeatureScatter(seur, feature1 = "nFeature_RNA", feature2 = "percent.mt", group.by = "orig.ident")
seur <- RunMiQC(seur, percent.mt = "percent.mt", nFeature_RNA = "nFeature_RNA", posterior.cutoff = 0.75,
model.slot = "flexmix_model")
library(Seurat, quietly = TRUE)
library(SeuratWrappers)
p5 = FeatureScatter(seur, feature1 = "nFeature_RNA", feature2 = "percent.mt", group.by = "orig.ident")
seur <- RunMiQC(seur, percent.mt = "percent.mt", nFeature_RNA = "nFeature_RNA", posterior.cutoff = 0.75,
model.slot = "flexmix_model")
remotes::install_github('satijalab/seurat-wrappers')
Sys.getenv("tar")
Sys.getenv('HOME')
Sys.getenv("TAR")
Sys.getenv("TAR")
